#include <stdio.h>
#include <windows.h>
#include <stdlib.h>
#include <gl/gl.h>
#include <gl/glu.h>
#include <gl/glut.h>
#include <math.h>

#define SCREENWIDTH 1600
#define SCREENHEIGHT 900
#define PI 3.1415926535897932384626433832795
#define FPS 60
#define cloudSpeed 0.5
#define movementSpeed 5
#define time 5
#define flyingSpeed 4

//base shapes
void drawRectangle(int x, int y, int w, int h);
void rectangle(int x, int y, int w, int h);
void oval(int x, int y, float rX, float rY);
void circle(int x, int y, float r);
void halfCircle(float x, float y, float r);
void lines(float x1, float y1, float x2, float y2);
void triangle(float x, float y, float l);

//forming objects 
void sky();
void ground();
void mountain();
void clouds(int xPosition);
void background();
void pinnochio(float x, float y, float width, float height, float speedX, float speedY, float scaleX, float scaleY, float nose_length);
void redApple(int x, int y);
void greenApple(int x, int y);
void drawTable(int x, int y);
void appleStall(int x, int y);
void person(int x, int y, int w, bool throwMotion);
void drawTextBubble(float position_x, float position_y, float ScaleX, float ScaleY);
void questionMark(float x, float y, float scale);
void cash(float x, float y, float cashAngle);

void display();
void initGL();
void timer(int);
void idle();
int pinnoScaleFunction(bool pinnoFposition);
void print(int x, int y, const char* text);
void showText1(int x, int y);
void showText2(int x, int y);
void cashFly(float x, float y, float cashAngle, float cashDx);
void appleFly(float x, float y, float appleAngle);
void showText4(int x, int y);

float cloudXposition = 0.0;
int cloudState = 1;
float pinnoXposition = 650;
float pinnoYposition = 300;
int pinnoXScale = 1;
int pinnoYScale = 1;
int personXposition = 2200;
int personYposition = 170;
float cashAngle = 0.0f;
float cashDx = 0.0f;
float appleAngle = 0.0f;
const char* text1 = "APPLE STORE";
const char* text2 = "RM 5";
const char* text3 = "5";
const char* text4 = "Thank youuuuuuuu";

int timer1 = 0;
int timer2 = 0;

bool text1show = false;
bool text2show = false;
bool text4show = false;
bool pinnoFposition = true; //false = facing left
bool personMovingLeft = false;
bool personMovingRight = false;
bool throwMotion = false;
bool moneyShow = false;
bool appleRposition = true;
bool personWalkAway = false;

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);

    glutInitWindowSize(SCREENWIDTH, SCREENHEIGHT);
    glutCreateWindow("CG Project");

    glutDisplayFunc(display);
    glutIdleFunc(idle);
    glutTimerFunc(1000, timer, 0);

    initGL();

    //Start the main loop
    glutMainLoop();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glPointSize(10.0);
    glLineWidth(4.0);

    background();
    appleStall(350, 100);


    pinnoXScale = pinnoScaleFunction(pinnoFposition);
    pinnochio(pinnoXposition, pinnoYposition, 100.0, 50.0f, 0, 0, pinnoXScale, pinnoYScale, 0);

    person(personXposition, personYposition, 110, throwMotion);

    if (text1show == true) {
        showText1(950, 350);
    }

    if (text2show == true) {
        showText2(500, 350);
    }

    if (moneyShow == true) {
        cashFly(1150, 250, cashAngle, cashDx);
    }

    if (appleRposition == true) {
        appleFly(465, 300, appleAngle);
    }

    if (text4show == true) {
        showText4(950, 350);
    }

    glFlush();
    glutSwapBuffers();
}

void initGL() {
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluOrtho2D(0, SCREENWIDTH, 0, SCREENHEIGHT);
}

void timer(int) {
    glutPostRedisplay();
    glutTimerFunc(1000 / FPS, timer, 0);

    switch (cloudState) {
    case 1:
        if (cloudXposition <= (1600 - SCREENWIDTH * 6 / 7)) {
            cloudXposition += cloudSpeed;
        }
        else {
            cloudState = 2;
        }
        break;
    case 2:
        if (cloudXposition >= -(SCREENWIDTH / 6)) {
            cloudXposition -= cloudSpeed;
        }
        else {
            cloudState = 1;
        }
        break;
    default:
        break;
    }
}

void idle() {
    DWORD start = GetTickCount64();
    while (GetTickCount64() - start < 1000 / FPS);

    if (timer1 == 0 && text1show == false && personXposition > 1100) {
        personXposition -= movementSpeed;
    }
    if (personXposition <= 1100) {
        personXposition = 1100;
        timer1 += time;
    }

    if (timer1 >= 100 && timer1 < 500) {
        text1show = true;
    }
    else if (timer1 >= 500 && timer1 < 700) {
        text1show = false;
    }
    else if (timer1 >= 700 && timer1 < 1100) {
        text2show = true;
    }
    else if (timer1 >= 1100 && timer1 < 1200) {
        text2show = false;
    }
    else if (timer1 >= 1200 && timer1 < 1400) {
        throwMotion = true;
        moneyShow = true;
    }
    else if (timer1 >= 1400 && timer1 < 1600) {
        throwMotion = false;
        moneyShow = true;
    }
    else {
        timer1 = timer1;
    }

    if (moneyShow == true) {
        cashAngle += 5.0f;
        cashDx += flyingSpeed;
    }

    if (cashDx == 400) {
        moneyShow = false;
        pinnoFposition = false;
    }

    if (appleRposition == true && cashDx == 400) {
        appleAngle += 2.0f;
    }

    if (appleAngle >= 60.0f && appleAngle < 180.0f) {
        pinnoFposition = true;
    }
    if (appleAngle == 180.0f) {
        pinnoFposition = true;
        appleRposition = false;
        appleAngle = 180.0f;
        timer2 += time;
    }

    if (timer2 >= 100 && timer2 < 400) {
        text4show = true;
    }
    else if (timer2 >= 400 && timer2 < 600) {
        text4show = false;
        personWalkAway = true;
    }
    else {
        timer2 = timer2;
    }

    if (personWalkAway == true && personXposition < 2000) {
        personXposition += (2 * movementSpeed);
    }
    if (personWalkAway == true && personXposition >= 2000) {
        personXposition = 2000;
        personWalkAway = false;
    }
}

int pinnoScaleFunction(bool pinnoFp) {
    if (pinnoFp == false) {
        pinnoXposition = 650;
        return 1;
    }
    else {
        pinnoXposition = -750;
        return -1;
    }
}

void print(int x, int y, const char* text) {
    glRasterPos2f(x, y);
    for (int i = 0; text[i] != '\0'; i++) {
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, text[i]);
    }
}

void showText1(int x, int y) {
    drawTextBubble(x, y, 1, 1);
    greenApple(x + 370, y + 200);
    questionMark(x + 460, y + 200, 1.15);
}

void showText2(int x, int y) {
    drawTextBubble(x, y, 1, 1);
    glColor3ub(0, 0, 0);
    print(x + 350, y + 200, text2);
}

void cashFly(float x, float y, float cashAngle, float cashDx) {
    glPushMatrix();
    glTranslatef(-cashDx, 0.0f, 0.0f);
    cash(x, y, cashAngle);
    glPopMatrix();
}

void appleFly(float x, float y, float appleAngle) {
    glPushMatrix();
    glTranslatef(x + 350, y, 0.0f);
    glRotatef(-appleAngle, 0.0f, 0.0f, 1.0f);
    glTranslatef(-(x + 350), -y, 0.0f);
    greenApple(x, y);
    glPopMatrix();
}

void showText4(int x, int y) {
    drawTextBubble(x, y, 1, 1);
    glColor3ub(0, 0, 0);
    print(x + 300, y + 200, text4);
}

void drawRectangle(int x, int y, int w, int h) {
    int w1 = x + w;
    int h1 = y + h;
    glBegin(GL_POLYGON);
    glVertex2d(x, y);
    glVertex2d(w1, y);
    glVertex2d(w1, h1);
    glVertex2d(x, h1);
    glEnd();
}

void rectangle(int x, int y, int w, int h) {
    int w2 = w / 2;
    int h2 = h / 2;
    glBegin(GL_QUADS);
    glVertex2i(x - w2, y - h2);
    glVertex2i(x - w2, y + h2);
    glVertex2i(x + w2, y + h2);
    glVertex2i(x + w2, y - h2);
    glEnd();
}

void oval(int x, int y, float rX, float rY) {
    float x1 = (float)x;
    float y1 = (float)y;
    float n = 50;
    float inc = (2 * PI) / n;
    glBegin(GL_POLYGON);
    for (float theta = 0.0; theta <= 2 * PI; theta += inc) {
        glVertex2f(rX * cos(theta) + x1, rY * sin(theta) + y1);
    }
    glEnd();
}

void circle(int x, int y, float r) {
    float x1 = (float)x;
    float y1 = (float)y;
    float n = 50;
    float inc = (2 * PI) / n;
    glBegin(GL_POLYGON);
    for (float theta = 0.0; theta <= 2 * PI; theta += inc) {
        glVertex2d(r * cos(theta) + x1, r * sin(theta) + y1);
    }
    glEnd();
}

void halfCircle(float x, float y, float r) {
    float n = 50;
    float inc = PI / n;
    glBegin(GL_POLYGON);
    for (float theta = 0.0; theta <= PI; theta += inc) {
        glVertex2d(r * cos(theta) + x, r * sin(theta) + y);
    }
    glEnd();
}

void lines(float x1, float y1, float x2, float y2) {
    glBegin(GL_LINES);
    glVertex2d(x1, y1);
    glVertex2d(x2, y2);
    glEnd();
}

void triangle(float x, float y, float l) {
    glBegin(GL_TRIANGLES);
    glVertex2f(x - l, y);
    glVertex2f(x + l, y);
    glVertex2f(x, y + l);
    glEnd();
}

void sky() {
    glColor3ub(135, 206, 235);
    rectangle(SCREENWIDTH / 2, SCREENHEIGHT * 6 / 10, SCREENWIDTH, SCREENHEIGHT * 4 / 5);
}

void ground() {
    glColor3ub(92, 64, 51);
    rectangle(SCREENWIDTH / 2, SCREENHEIGHT / 10, SCREENWIDTH, SCREENHEIGHT / 5);
}

void mountain() {
    glColor3ub(21, 134, 10);
    triangle(SCREENWIDTH * 3 / 7, SCREENHEIGHT / 8, SCREENHEIGHT / 2);
    glColor3ub(32, 111, 24);
    triangle(SCREENWIDTH / 8, SCREENHEIGHT / 6, SCREENHEIGHT / 2);
    glColor3ub(63, 140, 56);
    triangle(SCREENWIDTH * 7 / 8, SCREENHEIGHT / 7, SCREENHEIGHT / 2);
}

void clouds(int xPosition) {
    glColor3ub(243, 238, 225);
    circle(xPosition + (SCREENWIDTH / 6), SCREENHEIGHT * 3 / 4, 50);
    circle(xPosition + (SCREENWIDTH / 6 + 60), SCREENHEIGHT * 3 / 4 + 20, 70);
    circle(xPosition + (SCREENWIDTH / 6 + 120), SCREENHEIGHT * 3 / 4, 45);

    circle(xPosition + (SCREENWIDTH * 3 / 6), SCREENHEIGHT * 6 / 7, 50);
    circle(xPosition + (SCREENWIDTH * 3 / 6 + 60), SCREENHEIGHT * 6 / 7 + 20, 70);
    circle(xPosition + (SCREENWIDTH * 3 / 6 + 120), SCREENHEIGHT * 6 / 7, 45);

    circle(xPosition + (SCREENWIDTH * 5 / 6), SCREENHEIGHT * 5 / 7, 50);
    circle(xPosition + (SCREENWIDTH * 5 / 6 + 60), SCREENHEIGHT * 5 / 7 + 20, 70);
    circle(xPosition + (SCREENWIDTH * 5 / 6 + 120), SCREENHEIGHT * 5 / 7, 45);
}

void background() {
    sky();
    mountain();
    ground();
    clouds(cloudXposition);
}

void pinnochio(float x, float y, float width, float height, float speedX, float speedY, float scaleX, float scaleY, float nose_length) {
    //hat
    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scaleX * (x + 5) + speedX, scaleY * (y + 100) + speedY);
    glVertex2i(scaleX * (x + 20) + speedX, scaleY * (y + 100) + speedY);
    glVertex2i(scaleX * (x + 20) + speedX, scaleY * (y + 80) + speedY);
    glVertex2i(scaleX * (x + 5) + speedX, scaleY * (y + 80) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scaleX * (x + 20) + speedX, scaleY * (y + 80) + speedY);
    glVertex2i(scaleX * (x + 60) + speedX, scaleY * (y + 80) + speedY);
    glVertex2i(scaleX * (x + 60) + speedX, scaleY * (y + 60) + speedY);
    glVertex2i(scaleX * (x + 20) + speedX, scaleY * (y + 60) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.9f, 0.9f, 0.5f);
    glVertex2i(scaleX * (x + 40) + speedX, scaleY * (y + 60) + speedY);
    glVertex2i(scaleX * (x + 80) + speedX, scaleY * (y + 60) + speedY);
    glVertex2i(scaleX * (x + 80) + speedX, scaleY * (y + 40) + speedY);
    glVertex2i(scaleX * (x + 40) + speedX, scaleY * (y + 40) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.7f, 0.7f, 0.7f);
    glVertex2i(scaleX * (x + 20) + speedX, scaleY * (y + 40) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y + 40) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y + 20) + speedY);
    glVertex2i(scaleX * (x + 20) + speedX, scaleY * (y + 20) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.9f, 0.9f, 0.5f);
    glVertex2i(scaleX * (x)+speedX, scaleY * (y)+speedY);
    glVertex2i(scaleX * (x + 120) + speedX, scaleY * (y)+speedY);
    glVertex2i(scaleX * (x + 120) + speedX, scaleY * (y + 20) + speedY);
    glVertex2i(scaleX * (x)+speedX, scaleY * (y + 20) + speedY);
    glEnd();

    //face
    glBegin(GL_POLYGON);
    glColor3f(0.95f, 0.75f, 0.6f);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 80) + speedY);
    glVertex2i(scaleX * (x)+speedX, scaleY * (y - 80) + speedY);
    glVertex2i(scaleX * (x)+speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 100) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.95f, 0.75f, 0.6f);
    glVertex2i(scaleX * (x + 120) + speedX, scaleY * (y)+speedY);
    glVertex2i(scaleX * (x)+speedX, scaleY * (y)+speedY);
    glVertex2i(scaleX * (x)+speedX, scaleY * (y - 80) + speedY);
    glVertex2i(scaleX * (x + 120) + speedX, scaleY * (y - 80) + speedY);
    glEnd();

    //hair
    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex2i(scaleX * (x + 120) + speedX, scaleY * (y - 0) + speedY);
    glVertex2i(scaleX * (x + 0) + speedX, scaleY * (y - 0) + speedY);
    glVertex2i(scaleX * (x + 0) + speedX, scaleY * (y - 20) + speedY);
    glVertex2i(scaleX * (x + 120) + speedX, scaleY * (y - 20) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 20) + speedY);
    glVertex2i(scaleX * (x + 120) + speedX, scaleY * (y - 20) + speedY);
    glVertex2i(scaleX * (x + 120) + speedX, scaleY * (y - 40) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 40) + speedY);
    glEnd();

    //nose
    glBegin(GL_POLYGON);
    glColor3f(1.0f, 0.5f, 0.0f);
    glVertex2i(scaleX * (x - 40 + nose_length) + speedX, scaleY * (y - 80) + speedY);
    glVertex2i(scaleX * (x + 40) + speedX, scaleY * (y - 80) + speedY);
    glVertex2i(scaleX * (x + 40) + speedX, scaleY * (y - 60) + speedY);
    glVertex2i(scaleX * (x - 40 + nose_length) + speedX, scaleY * (y - 60) + speedY);
    glEnd();

    //eyes
    glBegin(GL_POLYGON);
    glColor3f(0.3f, 0.3f, 0.3f);
    glVertex2i(scaleX * (x + 10) + speedX, scaleY * (y - 30) + speedY);
    glVertex2i(scaleX * (x + 40) + speedX, scaleY * (y - 30) + speedY);
    glVertex2i(scaleX * (x + 40) + speedX, scaleY * (y - 50) + speedY);
    glVertex2i(scaleX * (x + 10) + speedX, scaleY * (y - 50) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.3f, 0.3f, 0.3f);
    glVertex2i(scaleX * (x + 50) + speedX, scaleY * (y - 30) + speedY);
    glVertex2i(scaleX * (x + 80) + speedX, scaleY * (y - 30) + speedY);
    glVertex2i(scaleX * (x + 80) + speedX, scaleY * (y - 50) + speedY);
    glVertex2i(scaleX * (x + 50) + speedX, scaleY * (y - 50) + speedY);
    glEnd();

    //eyeball
    glBegin(GL_POLYGON);
    glColor3f(0.6f, 0.75f, 0.9f);
    glVertex2i(scaleX * (x + 50) + speedX, scaleY * (y - 35) + speedY);
    glVertex2i(scaleX * (x + 70) + speedX, scaleY * (y - 35) + speedY);
    glVertex2i(scaleX * (x + 70) + speedX, scaleY * (y - 50) + speedY);
    glVertex2i(scaleX * (x + 50) + speedX, scaleY * (y - 50) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.6f, 0.75f, 0.9f);
    glVertex2i(scaleX * (x + 10) + speedX, scaleY * (y - 35) + speedY);
    glVertex2i(scaleX * (x + 30) + speedX, scaleY * (y - 35) + speedY);
    glVertex2i(scaleX * (x + 30) + speedX, scaleY * (y - 50) + speedY);
    glVertex2i(scaleX * (x + 10) + speedX, scaleY * (y - 50) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.2f, 0.2f, 0.2f);
    glVertex2i(scaleX * (x + 50) + speedX, scaleY * (y - 40) + speedY);
    glVertex2i(scaleX * (x + 60) + speedX, scaleY * (y - 40) + speedY);
    glVertex2i(scaleX * (x + 60) + speedX, scaleY * (y - 50) + speedY);
    glVertex2i(scaleX * (x + 50) + speedX, scaleY * (y - 50) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.2f, 0.2f, 0.2f);
    glVertex2i(scaleX * (x + 10) + speedX, scaleY * (y - 40) + speedY);
    glVertex2i(scaleX * (x + 20) + speedX, scaleY * (y - 40) + speedY);
    glVertex2i(scaleX * (x + 20) + speedX, scaleY * (y - 50) + speedY);
    glVertex2i(scaleX * (x + 10) + speedX, scaleY * (y - 50) + speedY);
    glEnd();

    //body
    glBegin(GL_POLYGON);
    glColor3f(0.9f, 0.9f, 0.5f);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * x + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * x + speedX, scaleY * (y - 180) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 180) + speedY);
    glEnd();

    //pants
    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 130) + speedY);
    glVertex2i(scaleX * x + speedX, scaleY * (y - 130) + speedY);
    glVertex2i(scaleX * x + speedX, scaleY * (y - 180) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 180) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scaleX * (x + 35) + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 15) + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 15) + speedX, scaleY * (y - 180) + speedY);
    glVertex2i(scaleX * (x + 35) + speedX, scaleY * (y - 180) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scaleX * (x + 70) + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 50) + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 50) + speedX, scaleY * (y - 180) + speedY);
    glVertex2i(scaleX * (x + 70) + speedX, scaleY * (y - 180) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scaleX * x + speedX, scaleY * (y - 180) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 180) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 200) + speedY);
    glVertex2i(scaleX * x + speedX, scaleY * (y - 200) + speedY);
    glEnd();

    //vest
    glBegin(GL_POLYGON);
    glColor3f(0.2f, 0.2f, 0.2f);
    glVertex2i(scaleX * (x + 75) + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 180) + speedY);
    glVertex2i(scaleX * (x + 75) + speedX, scaleY * (y - 180) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.2f, 0.2f, 0.2f);
    glVertex2i(scaleX * x + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 100 - 90) + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 100 - 90) + speedX, scaleY * (y - 180) + speedY);
    glVertex2i(scaleX * x + speedX, scaleY * (y - 180) + speedY);
    glEnd();
}

void redApple(int x, int y) {
    glColor3ub(255, 0, 0);
    circle(x, y, 30);
    glColor3ub(150, 75, 0);
    rectangle(x, y + 23, 10, 30);
}

void greenApple(int x, int y) {
    glColor3ub(0, 255, 0);
    circle(x, y, 30);
    glColor3ub(150, 75, 0);
    rectangle(x, y + 23, 10, 30);
}

void drawTable(int x, int y) {
    //table base
    glColor3ub(100, 9, 9);
    rectangle(x, y + 100, 350, 150);

    //banner holder(left)
    glColor3ub(128, 128, 128);
    rectangle(x - 160, y + 250, 20, 150);

    //banner holder(right)
    glColor3ub(128, 128, 128);
    rectangle(x + 160, y + 250, 20, 150);

    //banner
    glColor3ub(255, 255, 255);
    rectangle(x, y + 350, 400, 50);

    glColor3ub(0, 0, 0);
    print(x - 75, y + 340, text1);
}

void drawTextBubble(float position_x, float position_y, float ScaleX, float ScaleY) {
    //left wall 
    glColor3ub(255, 255, 255);
    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 280 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 280 + position_x, ScaleY * 120 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 290 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 290 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 280 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 100 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 280 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 90 + position_y);
    glVertex2f(ScaleX * 280 + position_x, ScaleY * 80 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 90 + position_y);
    glVertex2f(ScaleX * 310 + position_x, ScaleY * 90 + position_y);
    glVertex2f(ScaleX * 310 + position_x, ScaleY * 80 + position_y);
    glVertex2f(ScaleX * 280 + position_x, ScaleY * 80 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 90 + position_y);
    glVertex2f(ScaleX * 310 + position_x, ScaleY * 90 + position_y);
    glVertex2f(ScaleX * 310 + position_x, ScaleY * 80 + position_y);
    glVertex2f(ScaleX * 280 + position_x, ScaleY * 80 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 310 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 320 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 320 + position_x, ScaleY * 90 + position_y);
    glVertex2f(ScaleX * 310 + position_x, ScaleY * 90 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 320 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 330 + position_x, ScaleY * 110 + position_y);
    glVertex2f(ScaleX * 330 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 320 + position_x, ScaleY * 100 + position_y);
    glEnd();

    //bottom wall
    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 320 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 110 + position_y);
    glVertex2f(ScaleX * 330 + position_x, ScaleY * 110 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 130 + position_y);
    glVertex2f(ScaleX * 540 + position_x, ScaleY * 130 + position_y);
    glVertex2f(ScaleX * 540 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 120 + position_y);
    glEnd();

    //right wall
    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 540 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 550 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 550 + position_x, ScaleY * 130 + position_y);
    glVertex2f(ScaleX * 540 + position_x, ScaleY * 130 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 290 + position_y);
    glVertex2f(ScaleX * 540 + position_x, ScaleY * 290 + position_y);
    glVertex2f(ScaleX * 540 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 280 + position_y);
    glEnd();

    //top wall
    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 300 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 300 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 290 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 290 + position_y);
    glEnd();

    //inner filling
    glColor3f(1.0, 1.0, 1.0);
    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 290 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 290 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 120 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 320 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 320 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 100 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 310 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 310 + position_x, ScaleY * 90 + position_y);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 90 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 120 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 540 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 540 + position_x, ScaleY * 130 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 130 + position_y);
    glEnd();
}

void questionMark(float x, float y, float scale) {
    glColor3ub(0, 0, 0);
    rectangle(x - 25, y + 20, 7 * scale, 7 * 1.5 * scale);
    rectangle(x - 17, y + 29, 7 * 1.5 * scale, 7 * scale);
    rectangle(x - 7, y + 35, 7 * 2 * scale, 7 * scale);
    rectangle(x + 5, y + 29, 7 * 1.5 * scale, 7 * scale);
    rectangle(x + 13, y + 20, 7 * scale, 7 * 2 * scale);
    rectangle(x + 7, y + 11, 7 * scale, 7 * 1.5 * scale);
    rectangle(x + 1, y + 3, 7 * scale, 7 * 1.5 * scale);
    rectangle(x - 4, y - 5, 7 * scale, 7 * 2 * scale);
    rectangle(x - 4, y - 21, 7 * scale, 7 * scale);
}

void appleStall(int x, int y) {
    drawTable(x, y);
    redApple(x - 115, y + 200);
    redApple(x - 50, y + 200);
    greenApple(x + 50, y + 200);
}

void person(int x, int y, int w, bool throwMotion) {
    int h = 1.2 * w;

    //head
    glColor3ub(255, 219, 172);
    drawRectangle(x, y + h, w, 0.5 * h);

    //eyes & mouth
    glColor3ub(0, 0, 0);
    drawRectangle(x + w / 14, y + 1.3 * h, w / 8, w / 10);
    drawRectangle(x + (w * 2) / 4, y + 1.3 * h, w / 8, w / 10);
    drawRectangle(x + w / 5, y + 1.1 * h, w / 4, w / 10);

    //smile
    drawRectangle(x + w / 2.4, y + 1.12 * h, w / 10, w / 10);

    //hair
    glColor3ub(80, 80, 80);
    drawRectangle(x - w / 6, y + 1.5 * h, w + w / 6, 0.15 * h);
    drawRectangle(x + w / 1.1, y + 1.03 * h, w / 6, 0.6 * h);

    //body
    glColor3ub(255, 255, 255);
    drawRectangle(x, y, w, h);
    glColor3ub(80, 180, 255);
    drawRectangle(x, y, w / 3, h);
    drawRectangle(x + (w - w / 3), y, w / 3, h);

    //left hand
    if (throwMotion == false) {
        glColor3ub(255, 219, 172);
        drawRectangle(x + w * 1.01, y, w / 4, h);
        glColor3ub(80, 180, 255);
        drawRectangle(x + w * 1.01, y + h / 3, w / 4, (h * 2) / 3);
    }
    else {
        glColor3ub(255, 219, 172);
        drawRectangle(x, y + w * 1.01, w, h / 4);
        glColor3ub(80, 180, 255);
        drawRectangle(x + h / 3, y + w * 1.01, (w * 2) / 3, h / 4);
    }

    //right hand
    glColor3ub(255, 219, 172);
    drawRectangle(x - (w / 4) * 1.01, y, w / 4, h);
    glColor3ub(80, 180, 255);
    drawRectangle(x - (w / 4) * 1.01, y + h / 3, w / 4, (h * 2) / 3);

    //legs
    glColor3ub(165, 42, 42);
    drawRectangle(x + w / 6, y - h / 2, w / 4, h / 2);
    drawRectangle(x + (w * 2) / 3, y - h / 2, w / 4, h / 2);
}

void cash(float x, float y, float cashAngle) {
    glPushMatrix();
    glTranslatef(x, y, 0.0f);
    glRotatef(cashAngle, 0.0f, 0.0f, 1.0f);
    glTranslatef(-x, -y, 0.0f);
    glColor3ub(0, 255, 0);
    rectangle(x, y, 40, 35);
    glColor3ub(0, 177, 64);
    rectangle(x + 20, y, 15, 35);
    rectangle(x - 20, y, 15, 35);

    glPopMatrix();
    glColor3ub(0, 0, 0);
    print(x - 5, y - 7, text3);
}
