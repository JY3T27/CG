#include <stdio.h>
#include <windows.h>
#include <stdlib.h>
#include <gl/gl.h>
#include <gl/glu.h>
#include <gl/glut.h>
#include <math.h>

#define SCREENWIDTH 1600
#define SCREENHEIGHT 900
#define PI 3.1415926535897932384626433832795

//base shapes
void drawRectangle(int x, int y, int w, int h);
void rectangle(int x, int y, int w, int h);
void circle(int x, int y, float r);
void halfCircle(float x, float y, float r);
void lines(float x1, float y1, float x2, float y2);
void triangle(float x, float y, float l);

//forming objects 
void sky();
void ground();
void mountain();
void clouds();
void redApple(int x, int y);
void greenApple(int x, int y);
void drawTable(int x, int y);
void appleStall(int x, int y);
void guard(float x, float y);
void person(int x, int y, int w);

void display();
void initGL();

int main(int argc, char** argv) {
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInit(&argc, argv);
    glutInitWindowSize(SCREENWIDTH, SCREENHEIGHT);
    glutCreateWindow("Apple");
    glutDisplayFunc(display);

    initGL();

    glutMainLoop();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glPointSize(10.0);
    glLineWidth(4.0);

    sky();
    mountain();
    ground();
    clouds();
    appleStall(350, 100);
    person(1000, 100, 150);

    glEnd();
    glFlush();
    glutSwapBuffers();
}

void initGL() {
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, SCREENWIDTH, 0, SCREENHEIGHT);
}

void drawRectangle(int x, int y, int w, int h) {
    glBegin(GL_POLYGON);
    glVertex2d(x, y);
    glVertex2d(x + w, y);
    glVertex2d(x + w, y + h);
    glVertex2d(x, y + h);
    glEnd();
}

void rectangle(int x, int y, int w, int h) {
    int w2 = w / 2;
    int h2 = h / 2;
    glBegin(GL_QUADS);
    glVertex2i(x - w2, y - h2);
    glVertex2i(x - w2, y + h2);
    glVertex2i(x + w2, y + h2);
    glVertex2i(x + w2, y - h2);
    glEnd();
}

void circle(int x, int y, float r) {
    float x1 = (float)x;
    float y1 = (float)y;
    float n = 50;
    float inc = (2 * PI) / n;
    glBegin(GL_POLYGON);
    for (float theta = 0.0; theta <= 2 * PI; theta += inc) {
        glVertex2d(r * cos(theta) + x1, r * sin(theta) + y1);
    }
    glEnd();
}

void halfCircle(float x, float y, float r) {
    float n = 50;
    float inc = PI / n;
    glBegin(GL_POLYGON);
    for (float theta = 0.0; theta <= PI; theta += inc) {
        glVertex2d(r * cos(theta) + x, r * sin(theta) + y);
    }
    glEnd();
}

void lines(float x1, float y1, float x2, float y2) {
    glBegin(GL_LINES);
    glVertex2d(x1, y1);
    glVertex2d(x2, y2);
    glEnd();
}

void triangle(float x, float y, float l) {
    glBegin(GL_TRIANGLES);
    glVertex2f(x - l, y);
    glVertex2f(x + l, y);
    glVertex2f(x, y + l);
    glEnd();
}

void sky() {
    glColor3ub(135, 206, 235);
    rectangle(SCREENWIDTH / 2, SCREENHEIGHT * 6 / 10, SCREENWIDTH, SCREENHEIGHT * 4 / 5);
}

void ground() {
    glColor3ub(124, 252, 0);
    rectangle(SCREENWIDTH / 2, SCREENHEIGHT / 10, SCREENWIDTH, SCREENHEIGHT / 5);
}

void mountain() {
    glColor3ub(35, 144, 79);
    triangle(SCREENWIDTH * 3 / 7, SCREENHEIGHT / 6, SCREENHEIGHT / 2);
    glColor3ub(30, 196, 100);
    triangle(SCREENWIDTH / 8, SCREENHEIGHT / 6, SCREENHEIGHT / 2);
    glColor3ub(30, 196, 100);
    triangle(SCREENWIDTH * 7 / 8, SCREENHEIGHT / 6, SCREENHEIGHT / 2);
}

void clouds() {
    glColor3ub(236, 240, 241);
    circle(SCREENWIDTH / 6, SCREENHEIGHT * 3 / 4, 50);
    circle(SCREENWIDTH / 6 + 60, SCREENHEIGHT * 3 / 4 + 20, 70);
    circle(SCREENWIDTH / 6 + 120, SCREENHEIGHT * 3 / 4, 45);

    circle(SCREENWIDTH * 3 / 6, SCREENHEIGHT * 6 / 7, 50);
    circle(SCREENWIDTH * 3 / 6 + 60, SCREENHEIGHT * 6 / 7 + 20, 70);
    circle(SCREENWIDTH * 3 / 6 + 120, SCREENHEIGHT * 6 / 7, 45);

    circle(SCREENWIDTH * 5 / 6, SCREENHEIGHT * 5 / 7, 50);
    circle(SCREENWIDTH * 5 / 6 + 60, SCREENHEIGHT * 5 / 7 + 20, 70);
    circle(SCREENWIDTH * 5 / 6 + 120, SCREENHEIGHT * 5 / 7, 45);
}

void redApple(int x, int y) {
    glColor3ub(255, 0, 0);
    circle(x, y, 30);
    glColor3ub(150, 75, 0);
    rectangle(x, y + 23, 10, 30);
}

void greenApple(int x, int y) {
    glColor3ub(0, 255, 0);
    circle(x, y, 30);
    glColor3ub(150, 75, 0);
    rectangle(x, y + 23, 10, 30);
}

void drawTable(int x, int y) {
    //table base
    glColor3ub(150, 75, 0);
    rectangle(x, y + 100, 350, 150);
    //banner holder(left)
    glColor3ub(128, 128, 128);
    rectangle(x - 160, y + 250, 20, 150);
    //banner holder(right)
    glColor3ub(128, 128, 128);
    rectangle(x + 160, y + 250, 20, 150);
    //banner
    glColor3ub(255, 255, 255);
    rectangle(x, y + 350, 400, 50);
}

void appleStall(int x, int y) {
    drawTable(x, y);
    redApple(x - 115, y + 200);
    redApple(x - 50, y + 200);
    greenApple(x + 50, y + 200);
    greenApple(x + 115, y + 200);
}

void guard(float x, float y) {
    glColor3ub(244, 182, 108);
    rectangle(x, y - 70.0, 180.0, 130.0);
    rectangle(x, y - 70.0, 220.0, 50.0);
    rectangle(x, y - 140.0, 80.0, 20.0);
    rectangle(x, y - 280.0, 200.0, 40.0);

    glColor3ub(64, 64, 64);
    halfCircle(x, y + 12.0, 100.0);
    rectangle(x - 90, y - 220.0, 30.0, 130.0);
    rectangle(x + 90, y - 220.0, 30.0, 130.0);

    glColor3ub(54, 54, 54);
    rectangle(x, y, 300.0, 40.0);

    glColor3ub(25, 25, 25);
    circle(x - 40, y - 60, 25.0);
    circle(x + 40, y - 60, 25.0);
    lines(x - 90.0, y - 45.0, x - 60.0, y - 60.0);
    lines(x + 60.0, y - 60.0, x + 90.0, y - 45.0);
    lines(x - 40.0, y - 60.0, x + 40.0, y - 60.0);

    glColor3ub(212, 23, 23);
    lines(x - 40.0, y - 105.0, x + 40.0, y - 105.0);

    glColor3ub(255, 255, 255);
    rectangle(x, y - 235.0, 120.0, 170.0);

    glColor3ub(54, 54, 54);
    rectangle(x - 60, y - 235.0, 40.0, 170.0);
    rectangle(x + 60, y - 235.0, 40.0, 170.0);

    glColor3ub(173, 0, 0);
    rectangle(x, y - 225.0, 30.0, 150.0);
}

void person(int x, int y, int w) {
    int h = 1.2 * w;

    //head
    glColor3ub(255, 219, 172);
    rectangle(x, y + h, w, 0.5 * h);

    //eyes & mouth
    glColor3ub(0, 0, 0);
    rectangle(x + w / 14, y + 1.3 * h, w / 8, w / 10);
    rectangle(x + (w * 2) / 4, y + 1.3 * h, w / 8, w / 10);
    rectangle(x + w / 5, y + 1.1 * h, w / 4, w / 10);
    //smile
    rectangle(x + w / 2.4, y + 1.12 * h, w / 10, w / 10);

    //hair
    glColor3ub(80, 80, 80);
    rectangle(x - w / 6, y + 1.5 * h, w + w / 6, 0.15 * h);
    rectangle(x + w / 1.1, y + 1.03 * h, w / 6, 0.6 * h);

    //body
    glColor3ub(255, 255, 255);
    rectangle(x, y, w, h);
    glColor3ub(80, 180, 255);
    rectangle(x, y, w / 3, h);
    rectangle(x + (w - w / 3), y, w / 3, h);

    //left hand
    glColor3ub(255, 219, 172);
    rectangle(x + w * 1.01, y, w / 4, h);
    glColor3ub(80, 180, 255);
    rectangle(x + w * 1.01, y + h / 3, w / 4, (h * 2) / 3);
    //right hand
    glColor3ub(255, 219, 172);
    rectangle(x - (w / 4) * 1.01, y, w / 4, h);
    glColor3ub(80, 180, 255);
    rectangle(x - (w / 4) * 1.01, y + h / 3, w / 4, (h * 2) / 3);

    //legs
    glColor3ub(165, 42, 42);
    rectangle(x + w / 6, y - h / 2, w / 4, h / 2);
    rectangle(x + (w * 2) / 3, y - h / 2, w / 4, h / 2);
}
