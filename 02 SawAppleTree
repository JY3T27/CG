#include <stdint.h>
#include <time.h>
#include <Windows.h>
#include <GL/glut.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

const int SCREEN_WIDTH = 1600;
const int SCREEN_HEIGHT = 900;
#define FPS  30
#define PI 3.1415926535897932384626433832795

float walkingX = 0;
float walkingY = 0;
float nose_move = 0;
float nose_enlarge = 0;
float word_enlarge = 0;
float eyeMove = 0;
int dx = 5; //speed of x
int dy = 10; //speed of y
float scaleFactor = 1;
bool visible_lightBulb = false;

void init()
{
    /* Set the viewport */
    glViewport(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);

    /* Set the projection matrix */
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0, SCREEN_WIDTH, 0, SCREEN_HEIGHT, -1, 1);

    /* Set the modelview matrix */
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void rectangle(int x, int y, int w, int h)
{
    int w2 = w / 2;
    int h2 = h / 2;
    glBegin(GL_QUADS);
    glVertex2i(x - w2, y - h2);
    glVertex2i(x - w2, y + h2);
    glVertex2i(x + w2, y + h2);
    glVertex2i(x + w2, y - h2);
    glEnd();
}

void drawPinnochio(float x, float y, float width, float height, float speedX, float speedY, float scale, float nose_length, float nose_width, float eyeUp)
{

    //hat
    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scale * (x + 5) + speedX, scale * (y + 100) + speedY);
    glVertex2i(scale * (x + 20) + speedX, scale * (y + 100) + speedY);
    glVertex2i(scale * (x + 20) + speedX, scale * (y + 80) + speedY);
    glVertex2i(scale * (x + 5) + speedX, scale * (y + 80) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scale * (x + 20) + speedX, scale * (y + 80) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y + 80) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y + 60) + speedY);
    glVertex2i(scale * (x + 20) + speedX, scale * (y + 60) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.9f, 0.9f, 0.5f);
    glVertex2i(scale * (x + 40) + speedX, scale * (y + 60) + speedY);
    glVertex2i(scale * (x + 80) + speedX, scale * (y + 60) + speedY);
    glVertex2i(scale * (x + 80) + speedX, scale * (y + 40) + speedY);
    glVertex2i(scale * (x + 40) + speedX, scale * (y + 40) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.7f, 0.7f, 0.7f);
    glVertex2i(scale * (x + 20) + speedX, scale * (y + 40) + speedY);
    glVertex2i(scale * (x + 100) + speedX, scale * (y + 40) + speedY);
    glVertex2i(scale * (x + 100) + speedX, scale * (y + 20) + speedY);
    glVertex2i(scale * (x + 20) + speedX, scale * (y + 20) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.9f, 0.9f, 0.5f);
    glVertex2i(scale * (x)+speedX, scale * (y)+speedY);
    glVertex2i(scale * (x + 120) + speedX, scale * (y)+speedY);
    glVertex2i(scale * (x + 120) + speedX, scale * (y + 20) + speedY);
    glVertex2i(scale * (x)+speedX, scale * (y + 20) + speedY);
    glEnd();



    //face
    glBegin(GL_POLYGON);
    glColor3f(0.95f, 0.75f, 0.6f);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 80) + speedY);
    glVertex2i(scale * (x)+speedX, scale * (y - 80) + speedY);
    glVertex2i(scale * (x)+speedX, scale * (y - 100) + speedY);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 100) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.95f, 0.75f, 0.6f);
    glVertex2i(scale * (x + 120) + speedX, scale * (y)+speedY);
    glVertex2i(scale * (x)+speedX, scale * (y)+speedY);
    glVertex2i(scale * (x)+speedX, scale * (y - 80) + speedY);
    glVertex2i(scale * (x + 120) + speedX, scale * (y - 80) + speedY);
    glEnd();


    //hair
    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex2i(scale * (x + 120) + speedX, scale * (y - 0) + speedY);
    glVertex2i(scale * (x + 0) + speedX, scale * (y - 0) + speedY);
    glVertex2i(scale * (x + 0) + speedX, scale * (y - 20) + speedY);
    glVertex2i(scale * (x + 120) + speedX, scale * (y - 20) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 20) + speedY);
    glVertex2i(scale * (x + 120) + speedX, scale * (y - 20) + speedY);
    glVertex2i(scale * (x + 120) + speedX, scale * (y - 40) + speedY);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 40) + speedY);
    glEnd();

    //eyes
    glBegin(GL_POLYGON);
    glColor3f(0.3f, 0.3f, 0.3f);
    glVertex2i(scale * (x + 10) + speedX, scale * (y - 30) + speedY);
    glVertex2i(scale * (x + 40) + speedX, scale * (y - 30) + speedY);
    glVertex2i(scale * (x + 40) + speedX, scale * (y - 50) + speedY);
    glVertex2i(scale * (x + 10) + speedX, scale * (y - 50) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.3f, 0.3f, 0.3f);
    glVertex2i(scale * (x + 50) + speedX, scale * (y - 30) + speedY);
    glVertex2i(scale * (x + 80) + speedX, scale * (y - 30) + speedY);
    glVertex2i(scale * (x + 80) + speedX, scale * (y - 50) + speedY);
    glVertex2i(scale * (x + 50) + speedX, scale * (y - 50) + speedY);
    glEnd();


    //eyeball
    glBegin(GL_POLYGON);
    glColor3f(0.6f, 0.75f, 0.9f);
    glVertex2i(scale * (x + 50) + speedX, scale * (y - 35) + speedY);
    glVertex2i(scale * (x + 70) + speedX, scale * (y - 35) + speedY);
    glVertex2i(scale * (x + 70) + speedX, scale * (y - 50) + speedY);
    glVertex2i(scale * (x + 50) + speedX, scale * (y - 50) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.6f, 0.75f, 0.9f);
    glVertex2i(scale * (x + 10) + speedX, scale * (y - 35) + speedY);
    glVertex2i(scale * (x + 30) + speedX, scale * (y - 35) + speedY);
    glVertex2i(scale * (x + 30) + speedX, scale * (y - 50) + speedY);
    glVertex2i(scale * (x + 10) + speedX, scale * (y - 50) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.2f, 0.2f, 0.2f);
    glVertex2i(scale * (x + 50) + speedX, scale * (y - 40 + eyeUp) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y - 40 + eyeUp) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y - 50 + eyeUp) + speedY);
    glVertex2i(scale * (x + 50) + speedX, scale * (y - 50 + eyeUp) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.2f, 0.2f, 0.2f);
    glVertex2i(scale * (x + 10) + speedX, scale * (y - 40 + eyeUp) + speedY);
    glVertex2i(scale * (x + 20) + speedX, scale * (y - 40 + eyeUp) + speedY);
    glVertex2i(scale * (x + 20) + speedX, scale * (y - 50 + eyeUp) + speedY);
    glVertex2i(scale * (x + 10) + speedX, scale * (y - 50 + eyeUp) + speedY);
    glEnd();

    //body
    glBegin(GL_POLYGON);
    glColor3f(0.9f, 0.9f, 0.5f);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 100) + speedY);
    glVertex2i(scale * x + speedX, scale * (y - 100) + speedY);
    glVertex2i(scale * x + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 180) + speedY);
    glEnd();

    //pants
    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 130) + speedY);
    glVertex2i(scale * x + speedX, scale * (y - 130) + speedY);
    glVertex2i(scale * x + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 180) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scale * (x + 35) + speedX, scale * (y - 100) + speedY);
    glVertex2i(scale * (x + 15) + speedX, scale * (y - 100) + speedY);
    glVertex2i(scale * (x + 15) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 35) + speedX, scale * (y - 180) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scale * (x + 70) + speedX, scale * (y - 100) + speedY);
    glVertex2i(scale * (x + 50) + speedX, scale * (y - 100) + speedY);
    glVertex2i(scale * (x + 50) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 70) + speedX, scale * (y - 180) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scale * x + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 200) + speedY);
    glVertex2i(scale * x + speedX, scale * (y - 200) + speedY);
    glEnd();

    //vest
    glBegin(GL_POLYGON);
    glColor3f(0.2f, 0.2f, 0.2f);
    glVertex2i(scale * (x + 75) + speedX, scale * (y - 100) + speedY);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 100) + speedY);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 75) + speedX, scale * (y - 180) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.2f, 0.2f, 0.2f);
    glVertex2i(scale * x + speedX, scale * (y - 100) + speedY);
    glVertex2i(scale * (x + 100 - 90) + speedX, scale * (y - 100) + speedY);
    glVertex2i(scale * (x + 100 - 90) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * x + speedX, scale * (y - 180) + speedY);
    glEnd();

    //nose
    glBegin(GL_POLYGON);
    glColor3f(1.0f, 0.5f, 0.0f);
    glVertex2i(scale * (x - 40 + nose_length) + speedX, scale * (y - 80 + nose_enlarge) + speedY);
    glVertex2i(scale * (x + 40) + speedX, scale * (y - 80 + nose_enlarge) + speedY);
    glVertex2i(scale * (x + 40) + speedX, scale * (y - 60 - nose_enlarge) + speedY);
    glVertex2i(scale * (x - 40 + nose_length) + speedX, scale * (y - 60 - nose_enlarge) + speedY);
    glEnd();

}

void circle(int x, int y, float r) 
{
    float x1 = (float)x;
    float y1 = (float)y;
    float n = 50;
    float inc = (2 * PI) / n;
    glBegin(GL_POLYGON);
    for (float theta = 0.0; theta <= 2 * PI; theta += inc) {
        glVertex2d(r * cos(theta) + x1, r * sin(theta) + y1);
    }
    glEnd();
}

void redApple(int x, int y)
{
    glColor3ub(255, 0, 0);
    circle(x, y, 30);
    glColor3ub(150, 75, 0);
    rectangle(x, y + 23, 10, 30);
}

void greenApple(int x, int y)
{
    glColor3ub(0, 255, 0);
    circle(x, y, 30);
    glColor3ub(150, 75, 0);
    rectangle(x, y + 23, 10, 30);
}

void appleGroup()
{
    int x = 110;
    int y = 200;
    redApple(440 + x, 300 + y);
    redApple(540 + x, 400 + y);
    greenApple(540 + x, 300 + y);
    redApple(640 + x, 300 + y);
}

void drawCircle(int x, int y, int r, int n) {
    double inc = (2 * PI) / n;
    glBegin(GL_POLYGON);
    for (double theta = 0.0; theta <= 2 * PI; theta += inc) {
        glVertex2d(r * cos(theta) + x, r * sin(theta) + y);
    }
    glEnd();
}

void sky() 
{
    glColor3ub(4, 4, 52);
    rectangle(SCREEN_WIDTH / 2, SCREEN_HEIGHT * 6 / 10, SCREEN_WIDTH, SCREEN_HEIGHT * 4 / 5);
}

void ground()
{
    glColor3ub(92, 64, 51);
    rectangle(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 10, SCREEN_WIDTH, SCREEN_HEIGHT / 5);
}

void clouds(int xPosition) {
    glColor3ub(60, 60, 76);
    circle(xPosition + (SCREEN_WIDTH / 6), SCREEN_HEIGHT * 3 / 4, 50);
    circle(xPosition + (SCREEN_WIDTH / 6 + 60), SCREEN_HEIGHT * 3 / 4 + 20, 70);
    circle(xPosition + (SCREEN_WIDTH / 6 + 120), SCREEN_HEIGHT * 3 / 4, 45);

    circle(xPosition + (SCREEN_WIDTH * 3 / 6), SCREEN_HEIGHT * 6 / 7, 50);
    circle(xPosition + (SCREEN_WIDTH * 3 / 6 + 60), SCREEN_HEIGHT * 6 / 7 + 20, 70);
    circle(xPosition + (SCREEN_WIDTH * 3 / 6 + 120), SCREEN_HEIGHT * 6 / 7, 45);

    circle(xPosition + (SCREEN_WIDTH * 5 / 6), SCREEN_HEIGHT * 5 / 7, 50);
    circle(xPosition + (SCREEN_WIDTH * 5 / 6 + 60), SCREEN_HEIGHT * 5 / 7 + 20, 70);
    circle(xPosition + (SCREEN_WIDTH * 5 / 6 + 120), SCREEN_HEIGHT * 5 / 7, 45);
}

void lightBulb(float x, float y) {
    if (visible_lightBulb)
    {
        glColor3f(1.0f, 1.0f, 0.0f);
        circle(x + 15, y + 70, 30);
        glBegin(GL_POLYGON);
        glColor3f(1.0f, 1.0f, 1.0f);
        glVertex2i(x, y + 10);
        glVertex2i(x + 30, y + 10);
        glVertex2i(x + 30, y + 45);
        glVertex2i(x, y + 45);
        glEnd();

        //left light
        glBegin(GL_POLYGON);
        glColor3f(1.0f, 1.0f, 0.0f);
        glVertex2i(x - 30, y + 90);
        glVertex2i(x - 37, y + 125);
        glVertex2i(x - 5, y + 108);
        glEnd();

        //mid light
        glBegin(GL_POLYGON);
        glColor3f(1.0f, 1.0f, 0.0f);
        glVertex2i(x + 0, y + 110);
        glVertex2i(x + 15, y + 145);
        glVertex2i(x + 30, y + 110);
        glEnd();

        //right light
        glBegin(GL_POLYGON);
        glColor3f(1.0f, 1.0f, 0.0f);
        glVertex2i(x + 35, y + 108);
        glVertex2i(x + 65, y + 125);
        glVertex2i(x + 60, y + 90);
        glEnd();
    }
}

void idle()
{
    static int totalX = 0.0;
    static int totalY = 0.0;
    static int noseX = 0.0;
    static int noseY = 0.0;
    static int eyeY = 0.0;
    static int timer = 0.0;
    DWORD start = GetTickCount64();
    while (GetTickCount64() - start < 1000 / FPS);

    if (totalX < 600)
    {
        walkingX -= dx;
        totalX += dx;
        timer += 1;
    }
    else if (totalX > 0)
    {
        walkingX += 0;
        eyeMove += 10;
        eyeY -= 10;
        timer += 1;
    }
    if (eyeY < -10)
    {
        eyeMove -= 10;
        timer += 1;
    }
    if (timer > 190)
    {
        visible_lightBulb = true;
    }
    
}

void drawAppleTree(float x, float y, float con_x, float ScaleX, float ScaleY) {

    // Tree trunk
    glColor4f(0.5f, 0.3f, 0.1f, 1.0f);
    glBegin(GL_POLYGON);
    glVertex2i(ScaleX * (x - 10 + con_x), ScaleY * (y - 65));
    glVertex2i(ScaleX * (x + 10 + con_x), ScaleY * (y - 65));
    glVertex2i(ScaleX * (x + 20 + con_x), ScaleY * (y - 185));
    glVertex2i(ScaleX * (x - 20 + con_x), ScaleY * (y - 185));
    glEnd();

    // Tree leaf
    glColor4f(0.0f, 0.5f, 0.0f, 1.0f);
    drawCircle(ScaleX * (x + con_x), ScaleY * (y), ScaleX * 30, 100);
    drawCircle(ScaleX * (x - 20 + con_x), ScaleY * (y - 30), ScaleX * 30, 100);
    drawCircle(ScaleX * (x + 20 + con_x), ScaleY * (y - 30), ScaleX * 30, 100);
    drawCircle(ScaleX * (x + 50 + con_x), ScaleY * (y - 65), ScaleX * 30, 100);
    drawCircle(ScaleX * (x + con_x), ScaleY * (y - 65), ScaleX * 30, 100);
    drawCircle(ScaleX * (x - 45 + con_x), ScaleY * (y - 65), ScaleX * 30, 100);
}

void drawRoundTree(float x, float y, float con_x, float ScaleX, float ScaleY) {

    // Tree trunk
    glColor3ub(0, 0, 0);
    glBegin(GL_POLYGON);
    glVertex2i(ScaleX * (x - 10 + con_x), ScaleY * (y - 65));
    glVertex2i(ScaleX * (x + 10 + con_x), ScaleY * (y - 65));
    glVertex2i(ScaleX * (x + 20 + con_x), ScaleY * (y - 150));
    glVertex2i(ScaleX * (x - 20 + con_x), ScaleY * (y - 150));
    glEnd();

    // Tree leaf
    glColor3ub(0, 0, 0);
    drawCircle(ScaleX * (x + con_x), ScaleY * (y), ScaleX * 30, 100);
    drawCircle(ScaleX * (x - 20 + con_x), ScaleY * (y - 30), ScaleX * 30, 100);
    drawCircle(ScaleX * (x + 20 + con_x), ScaleY * (y - 30), ScaleX * 30, 100);
    drawCircle(ScaleX * (x + 50 + con_x), ScaleY * (y - 65), ScaleX * 30, 100);
    drawCircle(ScaleX * (x + con_x), ScaleY * (y - 65), ScaleX * 30, 100);
    drawCircle(ScaleX * (x - 45 + con_x), ScaleY * (y - 65), ScaleX * 30, 100);
}

void drawRoundTree2(float x, float y, float con_x, float ScaleX, float ScaleY) {

    // Tree trunk
    glColor3ub(20, 20, 20);
    glBegin(GL_POLYGON);
    glVertex2i(ScaleX * (x - 10 + con_x), ScaleY * (y - 65));
    glVertex2i(ScaleX * (x + 10 + con_x), ScaleY * (y - 65));
    glVertex2i(ScaleX * (x + 20 + con_x), ScaleY * (y - 200));
    glVertex2i(ScaleX * (x - 20 + con_x), ScaleY * (y - 200));
    glEnd();

    // Tree leaf
    glColor3ub(20, 20, 20);
    drawCircle(ScaleX * (x + con_x), ScaleY * (y), ScaleX * 30, 100);
    drawCircle(ScaleX * (x - 20 + con_x), ScaleY * (y - 30), ScaleX * 30, 100);
    drawCircle(ScaleX * (x + 20 + con_x), ScaleY * (y - 30), ScaleX * 30, 100);
    drawCircle(ScaleX * (x + 50 + con_x), ScaleY * (y - 65), ScaleX * 30, 100);
    drawCircle(ScaleX * (x + con_x), ScaleY * (y - 65), ScaleX * 30, 100);
    drawCircle(ScaleX * (x - 45 + con_x), ScaleY * (y - 65), ScaleX * 30, 100);
}

void drawTreeRow_Near() 
{
    // Tree row 1
    for (int j = 0; j < 1900; j += 170) {
        drawRoundTree(50, 300, j, 1, 1);
    }
}

void drawTreeRow_Far() 
{
    // Tree row 1
    for (int j = 0; j < 1900; j += 220) {
        drawRoundTree2(50, 250, j, 1.5, 2.1);
    }
}

void display()
{
    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
    /* Clear the screen */
    glClear(GL_COLOR_BUFFER_BIT);
    sky();
    ground();
    drawTreeRow_Near();
    drawTreeRow_Far();
    drawAppleTree(220, 190, 0, 3, 4);
    appleGroup();
    drawPinnochio(1600, 220, 100.0f, 50.0f, walkingX, walkingY, scaleFactor, nose_move, nose_enlarge, eyeMove);
    lightBulb(1050, 350);

    glFlush();

    /* Swap buffers */
    glutSwapBuffers();
}

void timer(int value)
{


    /* Call the display function */
    glutPostRedisplay();

    /* Set the timer for the next frame */
    glutTimerFunc(16, timer, 0);
}

int main(int argc, char** argv)
{

    /* Initialize GLUT */
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);

    /* Create the window */
    glutInitWindowSize(SCREEN_WIDTH, SCREEN_HEIGHT);
    glutCreateWindow("Pinnochio");
    glutInitWindowPosition(0, 0);

    /* Initialize OpenGL */
    init();

    /* Set up the display and timer functions */
    glutDisplayFunc(display);

    glutIdleFunc(idle);
    glutTimerFunc(0, timer, 0);

    /* Start the main loop */
    glutMainLoop();
    return 0;
}
