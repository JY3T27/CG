#include <stdio.h>
#include <windows.h>
#include <stdlib.h>
#include <gl/gl.h>
#include <gl/glu.h>
#include <gl/glut.h>
#include <math.h>

#define SCREENWIDTH 1600
#define SCREENHEIGHT 900
#define PI 3.1415926535897932384626433832795
#define FPS 60
#define cloudSpeed 0.5
#define movementSpeed 5
#define movementSpeedX 10
#define time 5
#define flyingSpeed 4
#define largement 2

//base shapes
void drawRectangle(int x, int y, int w, int h);
void rectangle(int x, int y, int w, int h);
void oval(int x, int y, float rX, float rY);
void circle(int x, int y, float r);
void halfCircle(float x, float y, float r);
void lines(float x1, float y1, float x2, float y2);
void triangle(float x, float y, float l);

//forming objects 
void sky();
void ground();
void mountain();
void clouds(int xPosition);
void background();
void pinnochio(float x, float y, float width, float height, float speedX, float speedY, float scaleX, float scaleY, float nose_length);
void redApple(int x, int y);
void greenApple(int x, int y);
void drawTable(int x, int y);
void appleStall(int x, int y);
void drawTextBubble(float position_x, float position_y, float ScaleX, float ScaleY);
void questionMark(float x, float y, float scale);
void drawTrump(float x, float y, float width, float height, float speedX, float speedY, float scale);
void guard(float x, float y);
void guardScaling(float x, float y, float scale, float angle);
void thoughts(float x, float y);
void money(float x, float y);
void lightBulb(float x, float y);
void meteorite(int x, int y, int s);
void whiteScreen();

void display();
void initGL();
void timer(int);
void idle();
int pinnoScaleFunction(bool pinnoFposition);
void print(int x, int y, const char* text);
void showText1(int x, int y);
void showText2(int x, int y);

float cloudXposition = 0.0;
int cloudState = 1;
float pinnoXposition = 650;
float pinnoYposition = 300;
int pinnoXScale = 1;
int pinnoYScale = 1;
int trumpXPosition = 1600; //750
int trumpYPosition = 330;
float trumpDx = 0;
float trumpDy = 0;
float trumpScale = 1.5f;
int guardXPosition = 1400;
int guardYPosition = 1600; //400
float guardScale = 0.7f;
float guardAngle = 0.0f;
float noseL = 0.0f;
float meteorX = SCREENWIDTH;
float meteorY = SCREENHEIGHT;
float meteorSize = 50;

const char* text1 = "APPLE STORE";
const char* text2 = "50 USD";

int timer1 = 0;
int timer2 = 0;

bool pinnoFposition = true; //false = facing left
bool text1show = false;
bool text2show = false;
bool lightB = false;
bool text3show = false;
bool noseExtend = false;
bool pointMotion = false;
bool meteorC = false;
bool blankScreen = false;

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);

    glutInitWindowSize(SCREENWIDTH, SCREENHEIGHT);
    glutCreateWindow("CG Project");

    glutDisplayFunc(display);
    glutIdleFunc(idle);
    glutTimerFunc(1000, timer, 0);

    initGL();

    //Start the main loop
    glutMainLoop();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glPointSize(10.0);
    glLineWidth(4.0);

    background();
    appleStall(350, 100);

    drawTrump(trumpXPosition, trumpYPosition, 100.0f, 50.0f, trumpDx, trumpDy, trumpScale);

    guardScaling(guardXPosition, guardYPosition, guardScale, guardAngle);
    
    pinnoXScale = pinnoScaleFunction(pinnoFposition);
    pinnochio(pinnoXposition, pinnoYposition, 100.0, 50.0f, 0, 0, pinnoXScale, pinnoYScale, noseL);

    if (text1show == true) {
        showText1(950, 350);
    }

    if (text2show == true) {
        thoughts(900, 500);
    }

    if (lightB == true) {
        lightBulb(800, 450);
    }

    if (text3show == true) {
        showText2(500, 350);
    }

    if (meteorC == true) {
        meteorite(meteorX, meteorY, meteorSize);
    }

    if (blankScreen == true) {
        whiteScreen();
    }


    glFlush();
    glutSwapBuffers();
}

void initGL() {
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluOrtho2D(0, SCREENWIDTH, 0, SCREENHEIGHT);
}

void timer(int) {
    glutPostRedisplay();
    glutTimerFunc(1000 / FPS, timer, 0);

    switch (cloudState) {
    case 1:
        if (cloudXposition <= (1600 - SCREENWIDTH * 6 / 7)) {
            cloudXposition += cloudSpeed;
        }
        else {
            cloudState = 2;
        }
        break;
    case 2:
        if (cloudXposition >= -(SCREENWIDTH / 6)) {
            cloudXposition -= cloudSpeed;
        }
        else {
            cloudState = 1;
        }
        break;
    default:
        break;
    }
}

void idle() {
    DWORD start = GetTickCount64();
    while (GetTickCount64() - start < 1000 / FPS);

    if (trumpXPosition > 750) {
        trumpXPosition -= movementSpeed;
    }
    else {
        if (guardYPosition > 400) {
            guardAngle -= 20.0f;
            guardYPosition -= 5;
        }
        else {
            guardYPosition = 400;
            timer1 += time;
        }
    }
    
    if (timer1 >= 100) {
        guardAngle = 0.0f;
        timer2 += time;
    }
    
    if (timer2 >= 200 && timer2 < 600) {
        text1show = true;
    }
    else if (timer2 >= 600 && timer2 < 800) {
        text1show = false;
    }
    else if (timer2 >= 800 && timer2 < 1200) {
        text2show = true;
    }
    else if (timer2 >= 1200 && timer2 < 1400) {
        text2show = false;
    }
    else if (timer2 >= 1400 && timer2 < 1800) {
        lightB = true;
    }
    else if (timer2 >= 1800 && timer2 < 2000) {
        lightB = false;
    }
    else if (timer2 >= 2000 && timer2 < 2400) {
        text3show = true;
    }
    else if (timer2 >= 2400 && timer2 < 2600) {
        text3show = false;
    }
    else if (timer2 >= 2600 && timer2 < 3000) {
        noseL -= movementSpeed;
    }
    else if (timer2 >= 3000 && timer2 < 3400) {
        noseL += movementSpeed;
    }
    else if (timer2 >= 3400 && timer2 < 3800) {
        pointMotion = true;
    }
    else {
        timer2 = timer2;
    }

    if (pointMotion == true){
        meteorC = true;
        if (meteorY > 150) {
            meteorX -= movementSpeedX;
            meteorY -= movementSpeed;
            meteorSize += largement;
        }
        else {
            blankScreen = true;
        }
    }
    
}

int pinnoScaleFunction(bool pinnoFp) {
    if (pinnoFp == false) {
        pinnoXposition = 650;
        return 1;
    }
    else {
        pinnoXposition = -750;
        return -1;
    }
}

void print(int x, int y, const char* text) {
    glRasterPos2f(x, y);
    for (int i = 0; text[i] != '\0'; i++) {
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, text[i]);
    }
}

void showText1(int x, int y) {
    drawTextBubble(x, y, 1, 1);
    greenApple(x + 370, y + 200);
    questionMark(x + 460, y + 200, 1.15);
}

void showText2(int x, int y) {
    drawTextBubble(x, y, 1, 1);
    glColor3ub(0, 0, 0);
    print(x + 350, y + 200, text2);
}

void drawRectangle(int x, int y, int w, int h) {
    int w1 = x + w;
    int h1 = y + h;
    glBegin(GL_POLYGON);
    glVertex2d(x, y);
    glVertex2d(w1, y);
    glVertex2d(w1, h1);
    glVertex2d(x, h1);
    glEnd();
}

void rectangle(int x, int y, int w, int h) {
    int w2 = w / 2;
    int h2 = h / 2;
    glBegin(GL_QUADS);
    glVertex2i(x - w2, y - h2);
    glVertex2i(x - w2, y + h2);
    glVertex2i(x + w2, y + h2);
    glVertex2i(x + w2, y - h2);
    glEnd();
}

void oval(int x, int y, float rX, float rY) {
    float x1 = (float)x;
    float y1 = (float)y;
    float n = 50;
    float inc = (2 * PI) / n;
    glBegin(GL_POLYGON);
    for (float theta = 0.0; theta <= 2 * PI; theta += inc) {
        glVertex2f(rX * cos(theta) + x1, rY * sin(theta) + y1);
    }
    glEnd();
}

void circle(int x, int y, float r) {
    float x1 = (float)x;
    float y1 = (float)y;
    float n = 50;
    float inc = (2 * PI) / n;
    glBegin(GL_POLYGON);
    for (float theta = 0.0; theta <= 2 * PI; theta += inc) {
        glVertex2d(r * cos(theta) + x1, r * sin(theta) + y1);
    }
    glEnd();
}

void halfCircle(float x, float y, float r) {
    float n = 50;
    float inc = PI / n;
    glBegin(GL_POLYGON);
    for (float theta = 0.0; theta <= PI; theta += inc) {
        glVertex2d(r * cos(theta) + x, r * sin(theta) + y);
    }
    glEnd();
}

void lines(float x1, float y1, float x2, float y2) {
    glBegin(GL_LINES);
    glVertex2d(x1, y1);
    glVertex2d(x2, y2);
    glEnd();
}

void triangle(float x, float y, float l) {
    glBegin(GL_TRIANGLES);
    glVertex2f(x - l, y);
    glVertex2f(x + l, y);
    glVertex2f(x, y + l);
    glEnd();
}

void sky() {
    glColor3ub(135, 206, 235);
    rectangle(SCREENWIDTH / 2, SCREENHEIGHT * 6 / 10, SCREENWIDTH, SCREENHEIGHT * 4 / 5);
}

void ground() {
    glColor3ub(92, 64, 51);
    rectangle(SCREENWIDTH / 2, SCREENHEIGHT / 10, SCREENWIDTH, SCREENHEIGHT / 5);
}

void mountain() {
    glColor3ub(21, 134, 10);
    triangle(SCREENWIDTH * 3 / 7, SCREENHEIGHT / 8, SCREENHEIGHT / 2);
    glColor3ub(32, 111, 24);
    triangle(SCREENWIDTH / 8, SCREENHEIGHT / 6, SCREENHEIGHT / 2);
    glColor3ub(63, 140, 56);
    triangle(SCREENWIDTH * 7 / 8, SCREENHEIGHT / 7, SCREENHEIGHT / 2);
}

void clouds(int xPosition) {
    glColor3ub(243, 238, 225);
    circle(xPosition + (SCREENWIDTH / 6), SCREENHEIGHT * 3 / 4, 50);
    circle(xPosition + (SCREENWIDTH / 6 + 60), SCREENHEIGHT * 3 / 4 + 20, 70);
    circle(xPosition + (SCREENWIDTH / 6 + 120), SCREENHEIGHT * 3 / 4, 45);

    circle(xPosition + (SCREENWIDTH * 3 / 6), SCREENHEIGHT * 6 / 7, 50);
    circle(xPosition + (SCREENWIDTH * 3 / 6 + 60), SCREENHEIGHT * 6 / 7 + 20, 70);
    circle(xPosition + (SCREENWIDTH * 3 / 6 + 120), SCREENHEIGHT * 6 / 7, 45);

    circle(xPosition + (SCREENWIDTH * 5 / 6), SCREENHEIGHT * 5 / 7, 50);
    circle(xPosition + (SCREENWIDTH * 5 / 6 + 60), SCREENHEIGHT * 5 / 7 + 20, 70);
    circle(xPosition + (SCREENWIDTH * 5 / 6 + 120), SCREENHEIGHT * 5 / 7, 45);
}

void background() {
    sky();
    mountain();
    ground();
    clouds(cloudXposition);
}

void pinnochio(float x, float y, float width, float height, float speedX, float speedY, float scaleX, float scaleY, float nose_length) {
    //hat
    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scaleX * (x + 5) + speedX, scaleY * (y + 100) + speedY);
    glVertex2i(scaleX * (x + 20) + speedX, scaleY * (y + 100) + speedY);
    glVertex2i(scaleX * (x + 20) + speedX, scaleY * (y + 80) + speedY);
    glVertex2i(scaleX * (x + 5) + speedX, scaleY * (y + 80) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scaleX * (x + 20) + speedX, scaleY * (y + 80) + speedY);
    glVertex2i(scaleX * (x + 60) + speedX, scaleY * (y + 80) + speedY);
    glVertex2i(scaleX * (x + 60) + speedX, scaleY * (y + 60) + speedY);
    glVertex2i(scaleX * (x + 20) + speedX, scaleY * (y + 60) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.9f, 0.9f, 0.5f);
    glVertex2i(scaleX * (x + 40) + speedX, scaleY * (y + 60) + speedY);
    glVertex2i(scaleX * (x + 80) + speedX, scaleY * (y + 60) + speedY);
    glVertex2i(scaleX * (x + 80) + speedX, scaleY * (y + 40) + speedY);
    glVertex2i(scaleX * (x + 40) + speedX, scaleY * (y + 40) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.7f, 0.7f, 0.7f);
    glVertex2i(scaleX * (x + 20) + speedX, scaleY * (y + 40) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y + 40) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y + 20) + speedY);
    glVertex2i(scaleX * (x + 20) + speedX, scaleY * (y + 20) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.9f, 0.9f, 0.5f);
    glVertex2i(scaleX * (x)+speedX, scaleY * (y)+speedY);
    glVertex2i(scaleX * (x + 120) + speedX, scaleY * (y)+speedY);
    glVertex2i(scaleX * (x + 120) + speedX, scaleY * (y + 20) + speedY);
    glVertex2i(scaleX * (x)+speedX, scaleY * (y + 20) + speedY);
    glEnd();

    //face
    glBegin(GL_POLYGON);
    glColor3f(0.95f, 0.75f, 0.6f);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 80) + speedY);
    glVertex2i(scaleX * (x)+speedX, scaleY * (y - 80) + speedY);
    glVertex2i(scaleX * (x)+speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 100) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.95f, 0.75f, 0.6f);
    glVertex2i(scaleX * (x + 120) + speedX, scaleY * (y)+speedY);
    glVertex2i(scaleX * (x)+speedX, scaleY * (y)+speedY);
    glVertex2i(scaleX * (x)+speedX, scaleY * (y - 80) + speedY);
    glVertex2i(scaleX * (x + 120) + speedX, scaleY * (y - 80) + speedY);
    glEnd();

    //hair
    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex2i(scaleX * (x + 120) + speedX, scaleY * (y - 0) + speedY);
    glVertex2i(scaleX * (x + 0) + speedX, scaleY * (y - 0) + speedY);
    glVertex2i(scaleX * (x + 0) + speedX, scaleY * (y - 20) + speedY);
    glVertex2i(scaleX * (x + 120) + speedX, scaleY * (y - 20) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 20) + speedY);
    glVertex2i(scaleX * (x + 120) + speedX, scaleY * (y - 20) + speedY);
    glVertex2i(scaleX * (x + 120) + speedX, scaleY * (y - 40) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 40) + speedY);
    glEnd();

    //nose
    glBegin(GL_POLYGON);
    glColor3f(1.0f, 0.5f, 0.0f);
    glVertex2i(scaleX * (x - 40 + nose_length) + speedX, scaleY * (y - 80) + speedY);
    glVertex2i(scaleX * (x + 40) + speedX, scaleY * (y - 80) + speedY);
    glVertex2i(scaleX * (x + 40) + speedX, scaleY * (y - 60) + speedY);
    glVertex2i(scaleX * (x - 40 + nose_length) + speedX, scaleY * (y - 60) + speedY);
    glEnd();

    //eyes
    glBegin(GL_POLYGON);
    glColor3f(0.3f, 0.3f, 0.3f);
    glVertex2i(scaleX * (x + 10) + speedX, scaleY * (y - 30) + speedY);
    glVertex2i(scaleX * (x + 40) + speedX, scaleY * (y - 30) + speedY);
    glVertex2i(scaleX * (x + 40) + speedX, scaleY * (y - 50) + speedY);
    glVertex2i(scaleX * (x + 10) + speedX, scaleY * (y - 50) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.3f, 0.3f, 0.3f);
    glVertex2i(scaleX * (x + 50) + speedX, scaleY * (y - 30) + speedY);
    glVertex2i(scaleX * (x + 80) + speedX, scaleY * (y - 30) + speedY);
    glVertex2i(scaleX * (x + 80) + speedX, scaleY * (y - 50) + speedY);
    glVertex2i(scaleX * (x + 50) + speedX, scaleY * (y - 50) + speedY);
    glEnd();

    //eyeball
    glBegin(GL_POLYGON);
    glColor3f(0.6f, 0.75f, 0.9f);
    glVertex2i(scaleX * (x + 50) + speedX, scaleY * (y - 35) + speedY);
    glVertex2i(scaleX * (x + 70) + speedX, scaleY * (y - 35) + speedY);
    glVertex2i(scaleX * (x + 70) + speedX, scaleY * (y - 50) + speedY);
    glVertex2i(scaleX * (x + 50) + speedX, scaleY * (y - 50) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.6f, 0.75f, 0.9f);
    glVertex2i(scaleX * (x + 10) + speedX, scaleY * (y - 35) + speedY);
    glVertex2i(scaleX * (x + 30) + speedX, scaleY * (y - 35) + speedY);
    glVertex2i(scaleX * (x + 30) + speedX, scaleY * (y - 50) + speedY);
    glVertex2i(scaleX * (x + 10) + speedX, scaleY * (y - 50) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.2f, 0.2f, 0.2f);
    glVertex2i(scaleX * (x + 50) + speedX, scaleY * (y - 40) + speedY);
    glVertex2i(scaleX * (x + 60) + speedX, scaleY * (y - 40) + speedY);
    glVertex2i(scaleX * (x + 60) + speedX, scaleY * (y - 50) + speedY);
    glVertex2i(scaleX * (x + 50) + speedX, scaleY * (y - 50) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.2f, 0.2f, 0.2f);
    glVertex2i(scaleX * (x + 10) + speedX, scaleY * (y - 40) + speedY);
    glVertex2i(scaleX * (x + 20) + speedX, scaleY * (y - 40) + speedY);
    glVertex2i(scaleX * (x + 20) + speedX, scaleY * (y - 50) + speedY);
    glVertex2i(scaleX * (x + 10) + speedX, scaleY * (y - 50) + speedY);
    glEnd();

    //body
    glBegin(GL_POLYGON);
    glColor3f(0.9f, 0.9f, 0.5f);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * x + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * x + speedX, scaleY * (y - 180) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 180) + speedY);
    glEnd();

    //pants
    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 130) + speedY);
    glVertex2i(scaleX * x + speedX, scaleY * (y - 130) + speedY);
    glVertex2i(scaleX * x + speedX, scaleY * (y - 180) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 180) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scaleX * (x + 35) + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 15) + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 15) + speedX, scaleY * (y - 180) + speedY);
    glVertex2i(scaleX * (x + 35) + speedX, scaleY * (y - 180) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scaleX * (x + 70) + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 50) + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 50) + speedX, scaleY * (y - 180) + speedY);
    glVertex2i(scaleX * (x + 70) + speedX, scaleY * (y - 180) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.8f, 0.2f, 0.2f);
    glVertex2i(scaleX * x + speedX, scaleY * (y - 180) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 180) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 200) + speedY);
    glVertex2i(scaleX * x + speedX, scaleY * (y - 200) + speedY);
    glEnd();

    //vest
    glBegin(GL_POLYGON);
    glColor3f(0.2f, 0.2f, 0.2f);
    glVertex2i(scaleX * (x + 75) + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 100) + speedX, scaleY * (y - 180) + speedY);
    glVertex2i(scaleX * (x + 75) + speedX, scaleY * (y - 180) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.2f, 0.2f, 0.2f);
    glVertex2i(scaleX * x + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 100 - 90) + speedX, scaleY * (y - 100) + speedY);
    glVertex2i(scaleX * (x + 100 - 90) + speedX, scaleY * (y - 180) + speedY);
    glVertex2i(scaleX * x + speedX, scaleY * (y - 180) + speedY);
    glEnd();
}

void redApple(int x, int y) {
    glColor3ub(255, 0, 0);
    circle(x, y, 30);
    glColor3ub(150, 75, 0);
    rectangle(x, y + 23, 10, 30);
}

void greenApple(int x, int y) {
    glColor3ub(0, 255, 0);
    circle(x, y, 30);
    glColor3ub(150, 75, 0);
    rectangle(x, y + 23, 10, 30);
}

void drawTable(int x, int y) {
    //table base
    glColor3ub(100, 9, 9);
    rectangle(x, y + 100, 350, 150);

    //banner holder(left)
    glColor3ub(128, 128, 128);
    rectangle(x - 160, y + 250, 20, 150);

    //banner holder(right)
    glColor3ub(128, 128, 128);
    rectangle(x + 160, y + 250, 20, 150);

    //banner
    glColor3ub(255, 255, 255);
    rectangle(x, y + 350, 400, 50);

    glColor3ub(0, 0, 0);
    print(x - 75, y + 340, text1);
}

void drawTextBubble(float position_x, float position_y, float ScaleX, float ScaleY) {
    //left wall 
    glColor3ub(255, 255, 255);
    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 280 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 280 + position_x, ScaleY * 120 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 290 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 290 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 280 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 100 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 280 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 90 + position_y);
    glVertex2f(ScaleX * 280 + position_x, ScaleY * 80 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 90 + position_y);
    glVertex2f(ScaleX * 310 + position_x, ScaleY * 90 + position_y);
    glVertex2f(ScaleX * 310 + position_x, ScaleY * 80 + position_y);
    glVertex2f(ScaleX * 280 + position_x, ScaleY * 80 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 90 + position_y);
    glVertex2f(ScaleX * 310 + position_x, ScaleY * 90 + position_y);
    glVertex2f(ScaleX * 310 + position_x, ScaleY * 80 + position_y);
    glVertex2f(ScaleX * 280 + position_x, ScaleY * 80 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 310 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 320 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 320 + position_x, ScaleY * 90 + position_y);
    glVertex2f(ScaleX * 310 + position_x, ScaleY * 90 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 320 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 330 + position_x, ScaleY * 110 + position_y);
    glVertex2f(ScaleX * 330 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 320 + position_x, ScaleY * 100 + position_y);
    glEnd();

    //bottom wall
    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 320 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 110 + position_y);
    glVertex2f(ScaleX * 330 + position_x, ScaleY * 110 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 130 + position_y);
    glVertex2f(ScaleX * 540 + position_x, ScaleY * 130 + position_y);
    glVertex2f(ScaleX * 540 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 120 + position_y);
    glEnd();

    //right wall
    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 540 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 550 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 550 + position_x, ScaleY * 130 + position_y);
    glVertex2f(ScaleX * 540 + position_x, ScaleY * 130 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 290 + position_y);
    glVertex2f(ScaleX * 540 + position_x, ScaleY * 290 + position_y);
    glVertex2f(ScaleX * 540 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 280 + position_y);
    glEnd();

    //top wall
    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 300 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 300 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 290 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 290 + position_y);
    glEnd();

    //inner filling
    glColor3f(1.0, 1.0, 1.0);
    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 290 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 290 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 120 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 320 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 320 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 100 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 310 + position_x, ScaleY * 100 + position_y);
    glVertex2f(ScaleX * 310 + position_x, ScaleY * 90 + position_y);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 90 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 300 + position_x, ScaleY * 120 + position_y);
    glVertex2f(ScaleX * 290 + position_x, ScaleY * 120 + position_y);
    glEnd();

    glBegin(GL_QUADS);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 540 + position_x, ScaleY * 280 + position_y);
    glVertex2f(ScaleX * 540 + position_x, ScaleY * 130 + position_y);
    glVertex2f(ScaleX * 530 + position_x, ScaleY * 130 + position_y);
    glEnd();
}

void questionMark(float x, float y, float scale) {
    glColor3ub(0, 0, 0);
    rectangle(x - 25, y + 20, 7 * scale, 7 * 1.5 * scale);
    rectangle(x - 17, y + 29, 7 * 1.5 * scale, 7 * scale);
    rectangle(x - 7, y + 35, 7 * 2 * scale, 7 * scale);
    rectangle(x + 5, y + 29, 7 * 1.5 * scale, 7 * scale);
    rectangle(x + 13, y + 20, 7 * scale, 7 * 2 * scale);
    rectangle(x + 7, y + 11, 7 * scale, 7 * 1.5 * scale);
    rectangle(x + 1, y + 3, 7 * scale, 7 * 1.5 * scale);
    rectangle(x - 4, y - 5, 7 * scale, 7 * 2 * scale);
    rectangle(x - 4, y - 21, 7 * scale, 7 * scale);
}

void appleStall(int x, int y) {
    drawTable(x, y);
    redApple(x - 115, y + 200);
    redApple(x - 50, y + 200);
    greenApple(x + 50, y + 200);
}

void drawTrump(float x, float y, float width, float height, float speedX, float speedY, float scale) {
    //hair
    glBegin(GL_POLYGON);
    glColor3f(1.0f, 1.0f, 0.0f);
    glVertex2i(scale * (x + 5) + speedX, scale * (y - 120) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y - 120) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y - 80) + speedY);
    glVertex2i(scale * (x + 5) + speedX, scale * (y - 80) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(1.0f, 1.0f, 0.0f);
    glVertex2i(scale * (x + 5) + speedX, scale * (y - 80) + speedY);
    glVertex2i(scale * (x + 5) + speedX, scale * (y - 120) + speedY);
    glVertex2i(scale * (x - 40) + speedX, scale * (y - 120) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(1.0f, 1.0f, 0.0f);
    glVertex2i(scale * (x + 60) + speedX, scale * (y - 120) + speedY);
    glVertex2i(scale * (x + 70) + speedX, scale * (y - 120) + speedY);
    glVertex2i(scale * (x + 70) + speedX, scale * (y - 90) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y - 90) + speedY);
    glEnd();

    //face
    glBegin(GL_POLYGON);
    glColor3f(1.0f, 0.7f, 0.0f);
    glVertex2i(scale * (x - 10) + speedX, scale * (y - 120) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y - 120) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x - 10) + speedX, scale * (y - 180) + speedY);
    glEnd();

    //eyes
    glBegin(GL_POLYGON);
    glColor3f(1.0f, 1.0f, 0.5f);
    glVertex2i(scale * (x)+speedX, scale * (y - 130) + speedY);
    glVertex2i(scale * (x + 20) + speedX, scale * (y - 130) + speedY);
    glVertex2i(scale * (x + 20) + speedX, scale * (y - 150) + speedY);
    glVertex2i(scale * (x)+speedX, scale * (y - 150) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(1.0f, 1.0f, 0.5f);
    glVertex2i(scale * (x + 30) + speedX, scale * (y - 130) + speedY);
    glVertex2i(scale * (x + 50) + speedX, scale * (y - 130) + speedY);
    glVertex2i(scale * (x + 50) + speedX, scale * (y - 150) + speedY);
    glVertex2i(scale * (x + 30) + speedX, scale * (y - 150) + speedY);
    glEnd();

    //eyeball
    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex2i(scale * (x + 7) + speedX, scale * (y - 137) + speedY);
    glVertex2i(scale * (x + 13) + speedX, scale * (y - 137) + speedY);
    glVertex2i(scale * (x + 13) + speedX, scale * (y - 143) + speedY);
    glVertex2i(scale * (x + 7) + speedX, scale * (y - 143) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex2i(scale * (x + 37) + speedX, scale * (y - 137) + speedY);
    glVertex2i(scale * (x + 43) + speedX, scale * (y - 137) + speedY);
    glVertex2i(scale * (x + 43) + speedX, scale * (y - 143) + speedY);
    glVertex2i(scale * (x + 37) + speedX, scale * (y - 143) + speedY);
    glEnd();

    //mouth
    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex2i(scale * (x + 10) + speedX, scale * (y - 150) + speedY);
    glVertex2i(scale * (x + 40) + speedX, scale * (y - 150) + speedY);
    glVertex2i(scale * (x + 40) + speedX, scale * (y - 160) + speedY);
    glVertex2i(scale * (x + 10) + speedX, scale * (y - 160) + speedY);
    glEnd();

    //coat
    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.5f);
    glVertex2i(scale * (x - 10) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y - 230) + speedY);
    glVertex2i(scale * (x - 10) + speedX, scale * (y - 230) + speedY);
    glEnd();

    //undershirt
    glBegin(GL_POLYGON);
    glColor3f(0.7f, 0.7f, 0.7f);
    glVertex2i(scale * (x + 10) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 40) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 40) + speedX, scale * (y - 220) + speedY);
    glVertex2i(scale * (x + 10) + speedX, scale * (y - 220) + speedY);
    glEnd();

    //tie
    glBegin(GL_POLYGON);
    glColor3f(1.0f, 0.0f, 0.0f);
    glVertex2i(scale * (x + 20) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 30) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 30) + speedX, scale * (y - 215) + speedY);
    glVertex2i(scale * (x + 20) + speedX, scale * (y - 215) + speedY);
    glEnd();

    //hands
    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.5f);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y - 200) + speedY);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 200) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.5f);
    glVertex2i(scale * (x - 50) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x - 10) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x - 10) + speedX, scale * (y - 200) + speedY);
    glVertex2i(scale * (x - 50) + speedX, scale * (y - 200) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.5f);
    glVertex2i(scale * (x + 80) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 180) + speedY);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 220) + speedY);
    glVertex2i(scale * (x + 80) + speedX, scale * (y - 220) + speedY);
    glEnd();

    //fist
    glBegin(GL_POLYGON);
    glColor3f(1.0f, 0.7f, 0.0f);
    glVertex2i(scale * (x + 80) + speedX, scale * (y - 220) + speedY);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 220) + speedY);
    glVertex2i(scale * (x + 100) + speedX, scale * (y - 230) + speedY);
    glVertex2i(scale * (x + 80) + speedX, scale * (y - 230) + speedY);
    glEnd();
    
    //Right Hand
    if (pointMotion == false) {
        glBegin(GL_POLYGON);
        glColor3f(0.0f, 0.0f, 0.5f);
        glVertex2i(scale * (x - 50) + speedX, scale * (y - 180) + speedY);
        glVertex2i(scale * (x - 30) + speedX, scale * (y - 180) + speedY);
        glVertex2i(scale * (x - 30) + speedX, scale * (y - 220) + speedY);
        glVertex2i(scale * (x - 50) + speedX, scale * (y - 220) + speedY);
        glEnd();

        glBegin(GL_POLYGON);
        glColor3f(1.0f, 0.7f, 0.0f);
        glVertex2i(scale * (x - 50) + speedX, scale * (y - 220) + speedY);
        glVertex2i(scale * (x - 30) + speedX, scale * (y - 220) + speedY);
        glVertex2i(scale * (x - 30) + speedX, scale * (y - 230) + speedY);
        glVertex2i(scale * (x - 50) + speedX, scale * (y - 230) + speedY);
        glEnd();
    }
    else {
        glBegin(GL_POLYGON);
        glColor3f(0.0f, 0.0f, 0.5f);
        glVertex2i(scale * (x - 30) + speedX, scale * (y - 180) + speedY);
        glVertex2i(scale * (x - 30) + speedX, scale * (y - 200) + speedY);
        glVertex2i(scale * (x - 100) + speedX, scale * (y - 200) + speedY);
        glVertex2i(scale * (x - 100) + speedX, scale * (y - 180) + speedY);
        glEnd();

        glBegin(GL_POLYGON);
        glColor3f(1.0f, 0.7f, 0.0f);
        glVertex2i(scale * (x - 100) + speedX, scale * (y - 180) + speedY);
        glVertex2i(scale * (x - 100) + speedX, scale * (y - 200) + speedY);
        glVertex2i(scale * (x - 110) + speedX, scale * (y - 200) + speedY);
        glVertex2i(scale * (x - 110) + speedX, scale * (y - 180) + speedY);
        glEnd();
    }

    //pants
    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex2i(scale * (x - 10) + speedX, scale * (y - 230) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y - 230) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y - 250) + speedY);
    glVertex2i(scale * (x - 10) + speedX, scale * (y - 250) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex2i(scale * (x - 10) + speedX, scale * (y - 250) + speedY);
    glVertex2i(scale * (x + 10) + speedX, scale * (y - 250) + speedY);
    glVertex2i(scale * (x + 10) + speedX, scale * (y - 260) + speedY);
    glVertex2i(scale * (x - 10) + speedX, scale * (y - 260) + speedY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex2i(scale * (x + 40) + speedX, scale * (y - 250) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y - 250) + speedY);
    glVertex2i(scale * (x + 60) + speedX, scale * (y - 260) + speedY);
    glVertex2i(scale * (x + 40) + speedX, scale * (y - 260) + speedY);
    glEnd();
}

void guard(float x, float y) {
    glColor3ub(244, 182, 108);
    rectangle(x, y - 70.0, 180.0, 130.0);
    rectangle(x, y - 70.0, 220.0, 50.0);
    rectangle(x, y - 140.0, 80.0, 20.0);
    rectangle(x, y - 280.0, 200.0, 40.0);

    glColor3ub(64, 64, 64);
    halfCircle(x, y + 12.0, 100.0);
    rectangle(x - 90, y - 220.0, 30.0, 130.0);
    rectangle(x + 90, y - 220.0, 30.0, 130.0);

    glColor3ub(54, 54, 54);
    rectangle(x, y, 300.0, 40.0);

    glColor3ub(25, 25, 25);
    circle(x - 40.0, y - 60.0, 25.0);
    circle(x + 40.0, y - 60.0, 25.0);
    lines(x - 90.0, y - 45.0, x - 60.0, y - 60.0);
    lines(x + 60.0, y - 60.0, x + 90.0, y - 45.0);
    lines(x - 40.0, y - 60.0, x + 40.0, y - 60.0);

    glColor3ub(212, 23, 23);
    lines(x - 40.0, y - 105.0, x + 40.0, y - 105.0);

    glColor3ub(255, 255, 255);
    rectangle(x, y - 235.0, 120.0, 170.0);

    glColor3ub(54, 54, 54);
    rectangle(x - 60, y - 235.0, 40.0, 170.0);
    rectangle(x + 60, y - 235.0, 40.0, 170.0);

    glColor3ub(173, 0, 0);
    rectangle(x, y - 225.0, 30.0, 150.0);
}

void guardScaling(float x, float y, float scale, float angle) {
    glPushMatrix();
    glTranslatef(x, y - 200, 0.0f);
    glScalef(0.7f, 0.7f, 0.0f);
    glRotatef(angle, 0.0f, 0.0f, 1.0f);
    glTranslatef(-x, -y + 200, 0.0f);
    guard(x, y);
    glPopMatrix();
}

void thoughts(float x, float y) {
    glColor3ub(255, 255, 255);
    oval(x - 100, y - 100, 10, 5);
    oval(x - 80, y - 80, 15, 10);
    oval(x - 50, y - 50, 40, 30);
    oval(x + 40, y + 40, 150, 100);
    money(x, y);
}

void money(float x, float y) {
    glColor3ub(0, 0, 0);
    rectangle(x - 10, y + 40, 5, 100);
    rectangle(x + 90, y + 40, 5, 100);
    rectangle(x - 10, y + 70, 50, 5);
    rectangle(x + 90, y + 70, 50, 5);
    rectangle(x - 32, y + 52, 5, 35);
    rectangle(x + 68, y + 52, 5, 35);
    rectangle(x - 10, y + 40, 50, 5);
    rectangle(x + 90, y + 40, 50, 5);
    rectangle(x + 12, y + 25, 5, 35);
    rectangle(x + 112, y + 25, 5, 35);
    rectangle(x - 10, y + 7, 50, 5);
    rectangle(x + 90, y + 7, 50, 5);
}

void lightBulb(float x, float y) {
    glColor3ub(233, 163, 0);
    circle(x, y, 25);
    rectangle(x, y - 20, 20, 20);

    glColor3ub(255, 255, 0);
    circle(x, y - 7, 12);

    glColor3ub(96, 96, 96);
    rectangle(x, y - 30, 20, 10);

    glColor3ub(255, 255, 51);
    lines(x, y + 40, x, y + 58);
    lines(x + 28, y + 28, x + 40, y + 40);
    lines(x - 28, y + 28, x - 40, y + 40);
    lines(x - 35, y, x - 52, y);
    lines(x + 35, y, x + 52, y);
}

void meteorite(int x, int y, int s) {
    glBegin(GL_POLYGON);
    glColor3ub(255, 149, 5);
    glVertex2i(x, y);
    glVertex2i(x + s * 0.3, y - s * 0.15);
    glVertex2i(x + s * 1.5, y);
    // 7 dots tail
    glVertex2i(x + s * 3, y + s / 2);
    glVertex2i(x + s * 2, y + s / 1.6);
    glVertex2i(x + s * 3.3, y + s * 1.3);
    glVertex2i(x + s * 2.2, y + s * 1.3);
    glVertex2i(x + s * 2.8, y + s * 2.1);
    glVertex2i(x + s * 1.4, y + s * 1.4);
    glVertex2i(x + s * 1.5, y + s * 2.05);

    glVertex2i(x + s / 3, y + s);
    glVertex2i(x + s * 0.02, y + s * 0.3);
    glEnd();
}

void whiteScreen() {
    glColor3ub(255, 255, 255);
    rectangle(SCREENWIDTH/2, SCREENHEIGHT/2, SCREENWIDTH, SCREENHEIGHT);
}
